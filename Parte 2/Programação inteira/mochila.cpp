/* 
    Algoritmo para resolver o clássico problema da mochila 0/1
    utilizando branch and bound (programação linear inteira).
    Disponível em: https://www.geeksforgeeks.org/implementation-of-0-1-knapsack-using-branch-and-bound/
*/

// C++ program to solve knapsack problem using 
// branch and bound 
#include <bits/stdc++.h> 
using namespace std; 
  
// Structure for Item which store weight and corresponding 
// value of Item 
struct Item 
{ 
    float weight; 
    int value; 
}; 
  
// Node structure to store information of decision 
// tree 
struct Node 
{ 
    // level  --> Level of node in decision tree (or index 
    //             in arr[] 
    // profit --> Profit of nodes on path from root to this 
    //            node (including this node) 
    // bound ---> Upper bound of maximum profit in subtree 
    //            of this node/ 
    int level, profit, bound; 
    float weight; 
}; 
  
// Comparison function to sort Item according to 
// val/weight ratio 
bool cmp(Item a, Item b) 
{ 
    double r1 = (double)a.value / a.weight; 
    double r2 = (double)b.value / b.weight; 
    return r1 > r2; 
} 
  
// Returns bound of profit in subtree rooted with u. 
// This function mainly uses Greedy solution to find 
// an upper bound on maximum profit. 
int bound(Node u, int n, int W, Item arr[]) 
{ 
    // if weight overcomes the knapsack capacity, return 
    // 0 as expected bound 
    if (u.weight >= W) 
        return 0; 
  
    // initialize bound on profit by current profit 
    int profit_bound = u.profit; 
  
    // start including items from index 1 more to current 
    // item index 
    int j = u.level + 1; 
    int totweight = u.weight; 
  
    // checking index condition and knapsack capacity 
    // condition 
    while ((j < n) && (totweight + arr[j].weight <= W)) 
    { 
        totweight    += arr[j].weight; 
        profit_bound += arr[j].value; 
        j++; 
    } 
  
    // If k is not n, include last item partially for 
    // upper bound on profit 
    if (j < n) 
        profit_bound += (W - totweight) * arr[j].value / 
                                         arr[j].weight; 
  
    return profit_bound; 
} 
  
// Returns maximum profit we can get with capacity W 
int knapsack(int W, Item arr[], int n) 
{ 
    // sorting Item on basis of value per unit 
    // weight. 
    sort(arr, arr + n, cmp); 
  
    // make a queue for traversing the node 
    queue<Node> Q; 
    Node u, v; 
  
    // dummy node at starting 
    u.level = -1; 
    u.profit = u.weight = 0; 
    Q.push(u); 
  
    // One by one extract an item from decision tree 
    // compute profit of all children of extracted item 
    // and keep saving maxProfit 
    int maxProfit = 0; 
    while (!Q.empty()) 
    { 
        // Dequeue a node 
        u = Q.front(); 
        Q.pop(); 
  
        // If it is starting node, assign level 0 
        if (u.level == -1) 
            v.level = 0; 
  
        // If there is nothing on next level 
        if (u.level == n-1) 
            continue; 
  
        // Else if not last node, then increment level, 
        // and compute profit of children nodes. 
        v.level = u.level + 1; 
  
        // Taking current level's item add current 
        // level's weight and value to node u's 
        // weight and value 
        v.weight = u.weight + arr[v.level].weight; 
        v.profit = u.profit + arr[v.level].value; 
  
        // If cumulated weight is less than W and 
        // profit is greater than previous profit, 
        // update maxprofit 
        if (v.weight <= W && v.profit > maxProfit) 
            maxProfit = v.profit; 
  
        // Get the upper bound on profit to decide 
        // whether to add v to Q or not. 
        v.bound = bound(v, n, W, arr); 
  
        // If bound value is greater than profit, 
        // then only push into queue for further 
        // consideration 
        if (v.bound > maxProfit) 
            Q.push(v); 
  
        // Do the same thing,  but Without taking 
        // the item in knapsack 
        v.weight = u.weight; 
        v.profit = u.profit; 
        v.bound = bound(v, n, W, arr); 
        if (v.bound > maxProfit) 
            Q.push(v); 
    } 
  
    return maxProfit; 
} 

/********************** 5 itens, capacidade 10 *************************/
// driver program to test above function 
/*int main() 
{ 
    int W = 10;   // Weight of knapsack 
    Item arr[] = {{2, 40}, {3.14, 50}, {1.98, 100}, 
                  {5, 95}, {3, 30}}; 
    int n = sizeof(arr) / sizeof(arr[0]); 
  
    cout << "Maximum possible profit = "
         << knapsack(W, arr, n) << endl; 
  
    return 0; 
} */

/********************** 50 itens, capacidade 100 *************************/
// driver program to test above function 
/*int main() 
{ 
    int W = 100;
    Item arr[] = {{6, 78}, {75, 12}, {52, 81}, {63, 64}, 
        {50, 74}, {26, 69}, {79, 48}, {70, 93}, 
        {6, 41}, {68, 41}, {54, 77}, {30, 51}, 
        {47, 81}, {8, 56}, {15, 82}, {3, 20}, 
        {11, 29}, {31, 14}, {62, 45}, {77, 63}, 
        {70, 2}, {31, 49}, {2, 52}, {93, 7}, 
        {45, 61}, {99, 98}, {89, 29}, {48, 87}, 
        {9, 7}, {94, 23}, {40, 48}, {94, 51}, 
        {76, 24}, {64, 89}, {68, 93}, {51, 37}, 
        {46, 34}, {37, 47}, {37, 82}, {54, 81}, 
        {94, 4}, {31, 82}, {32, 78}, {68, 40}, 
        {37, 61}, {14, 76}, {8, 7}, {26, 35}, 
        {82, 42}, {76, 1}};
    int n = sizeof(arr) / sizeof(arr[0]); 
  
    cout << "Maximum possible profit = "
         << knapsack(W, arr, n) << endl; 
  
    return 0; 
} */

/********************** 100 itens, capacidade 200 *************************/
// driver program to test above function 
/*int main() 
{ 
    int W = 200;
    Item arr[] = {{17, 161}, {83, 109}, {138, 31}, {126, 93}, 
        {101, 56}, {4, 19}, {116, 197}, {114, 177}, 
        {172, 23}, {127, 131}, {130, 163}, {20, 15}, 
        {86, 51}, {190, 198}, {168, 137}, {69, 184}, 
        {49, 152}, {44, 138}, {134, 122}, {182, 186}, 
        {177, 185}, {4, 92}, {134, 70}, {21, 105}, 
        {92, 99}, {35, 174}, {61, 6}, {188, 99}, 
        {8, 129}, {96, 176}, {18, 164}, {111, 18}, 
        {67, 155}, {156, 152}, {28, 137}, {137, 4}, 
        {74, 93}, {47, 7}, {162, 19}, {111, 53}, 
        {118, 97}, {26, 178}, {102, 165}, {76, 109}, 
        {46, 123}, {36, 63}, {87, 147}, {80, 105}, 
        {53, 187}, {57, 80}, {76, 145}, {35, 101}, 
        {37, 33}, {59, 150}, {52, 169}, {155, 169}, 
        {17, 132}, {98, 70}, {97, 126}, {130, 142}, 
        {48, 166}, {156, 86}, {64, 187}, {191, 116}, 
        {174, 47}, {147, 1}, {143, 181}, {101, 180}, 
        {13, 159}, {81, 64}, {79, 35}, {184, 95}, 
        {119, 82}, {116, 15}, {7, 45}, {108, 54}, 
        {162, 15}, {140, 25}, {1, 82}, {92, 174}, 
        {80, 38}, {126, 22}, {18, 26}, {153, 183}, 
        {136, 34}, {198, 166}, {20, 182}, {12, 138}, 
        {63, 127}, {152, 69}, {172, 11}, {74, 85}, 
        {25, 165}, {110, 26}, {46, 1}, {151, 125}, 
        {191, 77}, {99, 8}, {54, 51}, {142, 142}};
    int n = sizeof(arr) / sizeof(arr[0]); 
  
    cout << "Maximum possible profit = "
         << knapsack(W, arr, n) << endl; 
  
    return 0; 
} */

/********************** 200 itens, capacidade 500 *************************/
// driver program to test above function 
/*int main() 
{ 
    int W = 500;
    Item arr[] = {{303, 435}, {435, 239}, {128, 475}, {207, 227}, 
        {445, 136}, {148, 463}, {486, 43}, {213, 6}, 
        {230, 463}, {347, 304}, {200, 309}, {145, 125}, 
        {32, 300}, {94, 73}, {391, 427}, {121, 46}, 
        {361, 407}, {284, 489}, {382, 343}, {215, 326}, 
        {478, 214}, {288, 316}, {256, 352}, {173, 486}, 
        {314, 19}, {289, 14}, {180, 286}, {138, 211}, 
        {85, 83}, {136, 327}, {9, 108}, {224, 370}, 
        {15, 8}, {210, 396}, {202, 276}, {73, 31}, 
        {489, 212}, {346, 244}, {63, 370}, {229, 228}, 
        {241, 370}, {241, 272}, {7, 231}, {482, 443}, 
        {313, 469}, {269, 174}, {77, 345}, {395, 443}, 
        {352, 104}, {338, 53}, {231, 262}, {435, 219}, 
        {473, 281}, {462, 387}, {2, 43}, {114, 94}, 
        {264, 355}, {365, 122}, {437, 347}, {64, 101}, 
        {167, 184}, {274, 243}, {380, 20}, {185, 231}, 
        {475, 374}, {135, 205}, {135, 70}, {423, 459}, 
        {202, 237}, {345, 55}, {131, 311}, {149, 246}, 
        {17, 13}, {219, 453}, {211, 134}, {53, 378}, 
        {169, 179}, {472, 49}, {198, 157}, {279, 173}, 
        {382, 266}, {377, 369}, {187, 152}, {327, 240}, 
        {240, 24}, {294, 370}, {334, 294}, {467, 350}, 
        {307, 185}, {154, 369}, {318, 58}, {246, 486}, 
        {236, 70}, {34, 286}, {226, 165}, {458, 459}, 
        {282, 186}, {327, 320}, {189, 154}, {59, 428}, 
        {29, 204}, {149, 362}, {498, 467}, {63, 156}, 
        {151, 216}, {24, 320}, {273, 122}, {158, 361}, 
        {43, 43}, {146, 268}, {59, 455}, {226, 192}, 
        {140, 405}, {11, 181}, {58, 421}, {108, 86}, 
        {125, 109}, {299, 474}, {75, 361}, {129, 78}, 
        {428, 4}, {397, 52}, {477, 406}, {264, 19}, 
        {301, 409}, {138, 359}, {363, 216}, {403, 355}, 
        {120, 413}, {35, 29}, {186, 494}, {466, 310}, 
        {102, 264}, {135, 29}, {476, 263}, {106, 255}, 
        {118, 354}, {158, 447}, {112, 422}, {465, 412}, 
        {330, 455}, {122, 45}, {170, 24}, {251, 141}, 
        {289, 137}, {169, 474}, {482, 486}, {135, 84}, 
        {249, 269}, {464, 76}, {31, 69}, {330, 500}, 
        {422, 487}, {446, 385}, {260, 263}, {296, 90}, 
        {217, 418}, {486, 238}, {441, 88}, {378, 81}, 
        {224, 398}, {54, 57}, {383, 188}, {140, 483}, 
        {456, 455}, {58, 338}, {23, 239}, {338, 297}, 
        {77, 135}, {181, 337}, {397, 329}, {278, 113}, 
        {246, 263}, {350, 38}, {202, 79}, {119, 277}, 
        {476, 24}, {333, 358}, {212, 325}, {340, 19}, 
        {279, 249}, {209, 302}, {487, 398}, {450, 416}, 
        {32, 482}, {252, 281}, {310, 29}, {393, 55}, 
        {143, 95}, {445, 344}, {173, 415}, {472, 1}, 
        {438, 304}, {210, 1}, {128, 50}, {372, 407}, 
        {150, 80}, {60, 489}, {477, 361}, {404, 360}};
        
    int n = sizeof(arr) / sizeof(arr[0]); 
  
    cout << "Maximum possible profit = "
         << knapsack(W, arr, n) << endl; 
  
    return 0; 
} */

/********************** 500 itens, capacidade 2000 *************************/
// driver program to test above function 
int main() 
{ 
    int W = 2000;
    Item arr[] = {{1844, 210}, {91, 1235}, {1417, 1660}, {1972, 235}, 
	{462, 1457}, {485, 588}, {814, 717}, {699, 506}, 
	{1444, 1454}, {144, 977}, {1592, 662}, {1702, 1750}, 
	{1987, 681}, {1794, 1267}, {117, 1766}, {1850, 1960}, 
	{1975, 293}, {1546, 1743}, {1952, 1517}, {329, 765}, 
	{1326, 814}, {1704, 491}, {1530, 755}, {996, 1325}, 
	{208, 1492}, {302, 1799}, {153, 3}, {1900, 140}, 
	{1035, 45}, {1758, 1151}, {1810, 1608}, {1463, 1785}, 
	{252, 1008}, {1879, 555}, {525, 208}, {1319, 202}, 
	{1021, 1375}, {692, 902}, {129, 1688}, {226, 688}, 
	{1179, 879}, {486, 1683}, {1234, 737}, {1822, 268}, 
	{781, 1580}, {1771, 590}, {1539, 1233}, {726, 142}, 
	{592, 605}, {696, 1116}, {1164, 366}, {1317, 536}, 
	{1740, 361}, {1437, 220}, {48, 14}, {907, 1578}, 
	{893, 1744}, {1612, 126}, {480, 1786}, {745, 1612}, 
	{1365, 867}, {554, 1255}, {451, 1279}, {1396, 1043}, 
	{235, 443}, {510, 1750}, {808, 179}, {285, 548}, 
	{539, 1721}, {1119, 938}, {1735, 378}, {867, 979}, 
	{121, 478}, {1456, 953}, {263, 552}, {916, 1979}, 
	{1419, 1469}, {1585, 1869}, {748, 1332}, {1263, 1334}, 
	{1774, 1773}, {1084, 582}, {1951, 1368}, {1481, 489}, 
	{1441, 599}, {1778, 1527}, {976, 644}, {505, 1449}, 
	{1121, 312}, {753, 1736}, {863, 1668}, {1714, 281}, 
	{1137, 1299}, {502, 236}, {630, 1764}, {1921, 404}, 
	{1888, 1004}, {1337, 1838}, {724, 817}, {678, 516}, 
	{1767, 455}, {42, 1095}, {1450, 898}, {543, 923}, 
	{1209, 1647}, {658, 71}, {1314, 723}, {704, 450}, 
	{373, 1557}, {1037, 1355}, {1320, 958}, {110, 1208}, 
	{313, 1446}, {1397, 1388}, {262, 75}, {255, 380}, 
	{881, 296}, {1474, 683}, {1545, 368}, {1605, 1105}, 
	{14, 614}, {1528, 1328}, {1336, 583}, {129, 61}, 
	{139, 1518}, {1415, 1810}, {475, 1524}, {1017, 1139}, 
	{969, 766}, {879, 1582}, {1192, 1133}, {313, 72}, 
	{1781, 1787}, {1106, 1325}, {154, 710}, {782, 168}, 
	{1675, 309}, {1847, 1011}, {891, 1975}, {1423, 1381}, 
	{1492, 837}, {1190, 318}, {712, 559}, {1809, 1680}, 
	{1324, 687}, {1613, 515}, {1819, 1925}, {938, 1599}, 
	{63, 44}, {1276, 217}, {1105, 57}, {736, 780}, 
	{717, 582}, {142, 1959}, {908, 1564}, {1339, 752}, 
	{752, 528}, {1421, 1463}, {1438, 1229}, {1494, 761}, 
	{267, 1458}, {1627, 86}, {1382, 917}, {36, 1797}, 
	{1312, 1311}, {13, 416}, {1367, 1100}, {1547, 435}, 
	{1681, 40}, {393, 940}, {1955, 83}, {1691, 706}, 
	{611, 1464}, {520, 400}, {692, 13}, {1161, 959}, 
	{1470, 787}, {1396, 1204}, {55, 1431}, {1352, 1366}, 
	{742, 1716}, {1782, 460}, {815, 1680}, {1247, 847}, 
	{72, 1639}, {1786, 26}, {1722, 1829}, {1084, 684}, 
	{1644, 1603}, {1083, 335}, {1968, 595}, {1645, 1789}, 
	{1734, 1392}, {1344, 1788}, {1175, 695}, {1154, 1916}, 
	{410, 1287}, {727, 1224}, {966, 1973}, {422, 1037}, 
	{1964, 208}, {1415, 37}, {388, 498}, {720, 31}, 
	{452, 154}, {717, 419}, {749, 714}, {560, 834}, 
	{457, 1903}, {621, 1631}, {598, 1774}, {1546, 1359}, 
	{1412, 625}, {583, 730}, {949, 1004}, {118, 912}, 
	{1563, 1532}, {948, 302}, {381, 19}, {684, 833}, 
	{173, 1753}, {1603, 1273}, {466, 162}, {106, 922}, 
	{417, 1078}, {553, 1014}, {1204, 450}, {372, 615}, 
	{1426, 1306}, {1344, 375}, {662, 1814}, {1638, 576}, 
	{1345, 586}, {1230, 1726}, {956, 1913}, {910, 1480}, 
	{1665, 864}, {1104, 482}, {1026, 1561}, {1404, 1442}, 
	{639, 308}, {807, 1842}, {1109, 1530}, {808, 535}, 
	{836, 504}, {1261, 1849}, {317, 898}, {424, 13}, 
	{1835, 1653}, {1738, 791}, {1918, 999}, {270, 1582}, 
	{1863, 1726}, {64, 1240}, {1286, 1819}, {1033, 1924}, 
	{478, 1839}, {117, 1586}, {1368, 1277}, {472, 555}, 
	{1780, 1732}, {403, 448}, {630, 1179}, {460, 816}, 
	{1183, 550}, {1606, 1100}, {1548, 228}, {1034, 1762}, 
	{305, 1449}, {1001, 1590}, {1267, 33}, {1866, 1744}, 
	{223, 334}, {1329, 1591}, {1610, 153}, {497, 1741}, 
	{1884, 1252}, {188, 865}, {782, 648}, {1681, 1964}, 
	{1197, 1638}, {1416, 1096}, {217, 449}, {858, 521}, 
	{1897, 1858}, {111, 1515}, {243, 328}, {1258, 465}, 
	{661, 938}, {407, 271}, {1090, 904}, {11, 1326}, 
	{155, 199}, {190, 936}, {1198, 222}, {1251, 394}, 
	{1860, 1018}, {1489, 428}, {1818, 346}, {1301, 66}, 
	{556, 1411}, {1580, 1150}, {1738, 1189}, {1614, 750}, 
	{479, 21}, {1020, 1920}, {1276, 1031}, {1245, 1782}, 
	{1581, 1787}, {717, 778}, {8, 319}, {1523, 219}, 
	{1337, 1363}, {999, 1506}, {61, 299}, {1572, 616}, 
	{61, 1151}, {117, 1798}, {692, 1730}, {547, 1170}, 
	{102, 1919}, {1441, 1377}, {1301, 686}, {1158, 1233}, 
	{824, 226}, {362, 1183}, {897, 1884}, {1402, 585}, 
	{1246, 400}, {90, 1306}, {1050, 1661}, {273, 1110}, 
	{1164, 389}, {1259, 1855}, {471, 157}, {1376, 924}, 
	{75, 1168}, {653, 1375}, {1853, 162}, {959, 1028}, 
	{740, 1320}, {211, 1636}, {1203, 1964}, {572, 801}, 
	{715, 661}, {458, 1764}, {674, 1083}, {873, 1837}, 
	{1823, 131}, {43, 293}, {287, 1770}, {1569, 362}, 
	{937, 221}, {88, 1142}, {382, 1047}, {169, 1121}, 
	{366, 731}, {1108, 1921}, {694, 1679}, {721, 1408}, 
	{340, 1530}, {1171, 1013}, {612, 43}, {1201, 435}, 
	{525, 1595}, {727, 812}, {1364, 647}, {1525, 652}, 
	{867, 1612}, {1793, 1249}, {1010, 314}, {721, 1728}, 
	{1044, 1829}, {1648, 1738}, {1507, 720}, {1497, 1846}, 
	{249, 668}, {1210, 861}, {1062, 762}, {1295, 1587}, 
	{356, 373}, {750, 71}, {1020, 274}, {723, 238}, 
	{237, 867}, {1486, 1247}, {1180, 207}, {974, 576}, 
	{35, 973}, {665, 1893}, {1692, 161}, {91, 292}, 
	{1180, 1300}, {1152, 242}, {414, 798}, {180, 769}, 
	{1523, 929}, {1192, 894}, {1202, 266}, {1131, 1438}, 
	{1132, 969}, {1036, 664}, {1175, 361}, {1239, 1561}, 
	{1333, 1903}, {1805, 1376}, {415, 1895}, {20, 1595}, 
	{1195, 1171}, {188, 1960}, {321, 367}, {1080, 1843}, 
	{1295, 271}, {736, 848}, {536, 1866}, {637, 20}, 
	{1186, 1673}, {683, 360}, {33, 1921}, {272, 1718}, 
	{175, 77}, {1093, 589}, {323, 1112}, {183, 1869}, 
	{635, 722}, {1828, 1307}, {1088, 908}, {1149, 734}, 
	{1530, 236}, {1581, 66}, {453, 218}, {437, 1639}, 
	{1890, 1119}, {350, 274}, {1391, 974}, {1991, 1565}, 
	{1402, 1436}, {505, 1724}, {899, 1040}, {1593, 1533}, 
	{1761, 1420}, {1191, 849}, {679, 691}, {1934, 209}, 
	{926, 1515}, {626, 1731}, {84, 1062}, {1721, 1973}, 
	{180, 70}, {598, 1570}, {1395, 589}, {1486, 796}, 
	{376, 342}, {872, 1274}, {1381, 464}, {1159, 1494}, 
	{235, 349}, {694, 1266}, {1040, 627}, {1474, 317}, 
	{493, 99}, {47, 576}, {1160, 1767}, {900, 1691}, 
	{189, 1498}, {1612, 1583}, {438, 1449}, {379, 813}, 
	{1790, 1602}, {86, 1523}, {65, 1244}, {1368, 651}, 
	{1593, 61}, {1916, 984}, {1039, 1741}, {1300, 1532}, 
	{1839, 1347}, {107, 1350}, {1465, 1007}, {1040, 1653}, 
	{504, 1003}, {1236, 941}, {451, 1966}, {105, 593}, 
	{1567, 190}, {115, 1983}, {1786, 1482}, {985, 1730}, 
	{1894, 901}, {713, 932}, {993, 12}, {463, 832}, 
	{1710, 570}, {533, 1175}, {1928, 1925}, {827, 783}, 
	{927, 414}, {1723, 1730}, {379, 179}, {322, 1945}};
        
    int n = sizeof(arr) / sizeof(arr[0]); 
  
    cout << "Maximum possible profit = "
         << knapsack(W, arr, n) << endl; 
  
    return 0; 
} 